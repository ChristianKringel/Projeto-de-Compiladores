PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException, IOException {
    Karloff analisador = new Karloff(new FileInputStream(args[0]));
    analisador.Karloff();
  }

}
PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <COMMENT: "//" (~["\n"])*>  // comentario de uma linha
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VOID: "void">
| <FLOAT: "float">
| <NEWVAR: "newVar">
| <PRINTOUT: "printOut">
| <BOOLEAN: "bool">
| <TRUE: "true">
| <FALSE: "false">
| <FUNCTION: "fun">
| <WHILE: "while">
| <IF: "if">
| <THEN: "then">
| <RETURN: "return">
| <ATRIBUICAO: "=">
| <PONTOVIRGULA: ";">
| <PONTO: ".">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MAIORQUE: ">">
| <MENORQUE: "<">
| <IGUAL: "==">
| <READINPUT: "readInput">
| <VIRGULA: ","> 
| <TOKEN_LITERAL: ((["0"-"9"])+) (("."(["0"-"9"])+)? ("E"("+"|"-")? (["0"-"9"])+)?)?>
| <TOKEN_ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z"]|["0"-"9"])*((["a"-"z","A"-"Z"]|["0"-"9"])+)* ("_")*>
}

void Karloff() :
{Token t;}
{
  Main() (Func())?
}

void Main() :
{}
{
  <VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> Vardecl() SeqComandos() <FCHAVES>
}

void Comando() :
{}
{
    <TOKEN_ID> ComandoL() // rep aq
    | <IF> Exp() <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
    | <WHILE> Exp() <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
    | <RETURN> Exp() <PONTOVIRGULA>
    | <PRINTOUT> Exp() <PONTOVIRGULA> 
}

void ComandoL() :
{}
{
  <ATRIBUICAO> ComandoLL() | <APARENTESES> (ListaExp())? <FPARENTESES> <PONTOVIRGULA> // rep aq
}

void ComandoLL() : 
{}
{
  Exp() <PONTOVIRGULA> | <READINPUT> <APARENTESES> <FPARENTESES> <PONTOVIRGULA>
}

// VARDECL -> ("newVar" TIPO TOKEN_id ";")*
void Vardecl() :
{}
{
  (<NEWVAR> Tipo() <TOKEN_ID> <PONTOVIRGULA>)*
}

// TIPO -> "float" | "boolean" | "void"
void Tipo() :
{}
{
  (<FLOAT> | <BOOLEAN> | <VOID>)
}

void Boolean() :
{}
{
  <TRUE> | <FALSE>
}


// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos() :
{}
{
  (Comando() )+
}


// EXP -> "(" EXP OP EXP ")" | FATOR
void Exp() :
{}
{
  <APARENTESES> Exp() Op() Exp() <FPARENTESES> | Fator()
}

void Fator() :
{}
{
  <TOKEN_ID> FatorL() | <TOKEN_LITERAL> | <TRUE> | <FALSE> 
}

void FatorL() :
{}
{
  (<APARENTESES> ListaExp() <FPARENTESES>)? 
}


// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
void Op() :
{}
{
  <SOMA>
  | <SUB>
  | <MULT>
  | <DIV>
  | <AND>
  | <OR>
  | <MENORQUE>
  | <MAIORQUE>
  | <IGUAL>
}

// LISTAEXP -> EXP | LISTAEXP "," EXP
void ListaExp() :
{}
{
  Exp() ListaExpL()
}

void ListaExpL() :
{}
{
  (<VIRGULA> Exp() ListaExpL())?
}

// FUNC -> FUNC "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"

void Func() :
{}
{
  (<FUNCTION> Tipo() <TOKEN_ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> Vardecl() SeqComandos() <FCHAVES>)+ 
}


// LISTAARG -> TIPO TOKEN_id ("," TIPO TOKEN_id)*
void ListaArg() :
{}
{
  Tipo() <TOKEN_ID> (ListaArgL())
}

void ListaArgL() : 
{}
{
  (<VIRGULA> Tipo() <TOKEN_ID> ListaArgL())?
}

