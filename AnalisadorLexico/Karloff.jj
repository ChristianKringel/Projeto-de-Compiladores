PARSER_BEGIN(Karloff)
import java.io.*;
import ast.*;
public class Karloff {

  public static void main(String args[]) throws ParseException, IOException {
    //Karloff analisador = new Karloff(new FileInputStream(args[0]));
    //analisador.Karloff();
    FileInputStream fs = new FileInputStream(new File(args[0]));
    Prog arvore =parser.Karloff();
    geraCodigo(arvore, args[0])
  }

}
PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <COMMENT: "//" (~["\n"])*>  // comentario de uma linha
}

TOKEN :
{
  <MAIN: "main">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VOID: "void">
| <FLOAT: "float">
| <NEWVAR: "newVar">
| <PRINTOUT: "printOut">
| <BOOLEAN: "bool">
| <TRUE: "true">
| <FALSE: "false">
| <FUNCTION: "fun">
| <WHILE: "while">
| <IF: "if">
| <THEN: "then">
| <RETURN: "return">
| <ATRIBUICAO: "=">
| <PONTOVIRGULA: ";">
| <PONTO: ".">
| <SOMA: "+">
| <SUB: "-">
| <MULT: "*">
| <DIV: "/">
| <AND: "&">
| <OR: "|">
| <MAIORQUE: ">">
| <MENORQUE: "<">
| <IGUAL: "==">
| <READINPUT: "readInput">
| <VIRGULA: ","> 
| <TOKEN_LITERAL: ((["0"-"9"])+) (("."(["0"-"9"])+)? ("E"("+"|"-")? (["0"-"9"])+)?)?>
| <TOKEN_ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z"]|["0"-"9"])*((["a"-"z","A"-"Z"]|["0"-"9"])+)* ("_")*>
}

Prog Karloff() :
{Main main;ArrayList<Func> funs=null;}
{
  main = Main() (funs=Func())?
  {return new Prog(main,funs);}
}

Main Main() :
{ArrayList<Comando> comandos; ArrayList<VarDecl> vars;}
{
  <VOID> <MAIN> <APARENTESES> <FPARENTESES> <ACHAVES> vars=Vardecl() comandos = SeqComandos() <FCHAVES>

  {return new Main(vars,comandos);}
  
}

Comando Comando() :
{Comando resultado;Comando comando;} 
{
    (<TOKEN_ID> comando=ComandoL() // rep aq {
      
      if(comando instanceof CAtribuicao)
      {

      }
      resultado = ???})

    | (<IF> Exp() <THEN> <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA> {resultado = ??;})
    | <WHILE> Exp() <ACHAVES> SeqComandos() <FCHAVES> <PONTOVIRGULA>
    | <RETURN> Exp() <PONTOVIRGULA>
    | <PRINTOUT> Exp() <PONTOVIRGULA> 

    {return resultado;}
}

Comando ComandoL() :
{Comando resp;}
{
  <ATRIBUICAO> resp=ComandoLL() | <APARENTESES> (ListaExp())? <FPARENTESES> <PONTOVIRGULA> {resp = new CChamada}// rep aq
}

void ComandoLL() : 
{Comando result;Exp exp;}
{
  exp = Exp() <PONTOVIRGULA> {result = new CAtribuicao(0,"",exp);}| <READINPUT> <APARENTESES> <FPARENTESES> <PONTOVIRGULA>
}

// VARDECL -> ("newVar" TIPO TOKEN_id ";")*
ArrayList<VarDecl> Vardecl() :
{ArrayList<VarDecl> vars = new ArrayList<VarDecl>(); String tipo; Token var;}
{
  (<NEWVAR> tipo = Tipo() var=<TOKEN_ID> <PONTOVIRGULA> {vars.add(new VarDecl(tipo,var.image));})*
  {return Vardecl}
}

// TIPO -> "float" | "boolean" | "void"
String Tipo() :
{Token tipo;}
{
  (tipo=<FLOAT> | tipo=<BOOLEAN> | tipo=<VOID>)

{return tipo.image;}

}

Exp Boolean() :
{Token result;}
{
  result = <TRUE> | result = <FALSE>
  {return result.image;}
}


// SEQCOMANDOS -> SEQCOMANDOS COMANDO | vazio
void SeqComandos() :
{}
{
  (Comando() )+
}


// EXP -> "(" EXP OP EXP ")" | FATOR
Exp Exp() :
{}
{
  <APARENTESES> Exp() Op() Exp() <FPARENTESES> | Fator()
}

void Fator() :
{}
{
  <TOKEN_ID> FatorL() | <TOKEN_LITERAL> | <TRUE> | <FALSE> 
}

void FatorL() :
{}
{
  (<APARENTESES> ListaExp() <FPARENTESES>)? 
}


// OP -> "+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "=="
void Op() :
{}
{
  <SOMA>
  | <SUB>
  | <MULT>
  | <DIV>
  | <AND>
  | <OR>
  | <MENORQUE>
  | <MAIORQUE>
  | <IGUAL>
}

// LISTAEXP -> EXP | LISTAEXP "," EXP
void ListaExp() :
{}
{
  Exp() ListaExpL()
}

void ListaExpL() :
{}
{
  (<VIRGULA> Exp() ListaExpL())?
}

// FUNC -> FUNC "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"
// | "fun" TIPO TOKEN_id "(" LISTAARG? ")" "{" VARDECL SEQCOMANDOS "}"

void Func() :
{}
{
  (<FUNCTION> Tipo() <TOKEN_ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> Vardecl() SeqComandos() <FCHAVES>)+ 
}


// LISTAARG -> TIPO TOKEN_id ("," TIPO TOKEN_id)*
void ListaArg() :
{}
{
  Tipo() <TOKEN_ID> (ListaArgL())
}

void ListaArgL() : 
{}
{
  (<VIRGULA> Tipo() <TOKEN_ID> ListaArgL())?
}

